@using PrivateChat.Core.UseCases.EnterRoom
@using PrivateChat.Core.UseCases.CreateUser
@using Microsoft.Extensions.Logging
@using VSlices.Core.Abstracts.Responses
@using VSlices.Core.Abstracts.Sender

@inject ISender Sender
@inject DialogService DialogService
@inject ILogger<EnterRoomDialog> Logger

<EditForm Model="_enterRoomCommand" OnValidSubmit="SubmitForm">
    <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Nombre habitación: </RadzenText>
    <RadzenTextBox @bind-Value="_enterRoomCommand.Id" MaxLength="28" class="w-100 rz-mb-2" />
    
    <p class="text-center rz-mb-0">
        <RadzenButton ButtonType="ButtonType.Submit"
                      Text="Entrar a habitación" />

        <RadzenButton Click="DialogService.Close"
                      ButtonStyle="ButtonStyle.Secondary"
                      class="rz-ml-2"
                      Text="Cerrar" />
    </p>
</EditForm>

@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthStateTask { get; set; }

    readonly EnterRoomCommand _enterRoomCommand = new();

    private async Task SubmitForm()
    {
        var result = await Sender.SendAsync(_enterRoomCommand, CancellationToken.None);

        if (result.IsSuccess) DialogService.Close();

        if (result is { IsFailure: true, BusinessFailure.Kind: FailureKind.NotAuthenticatedUser })
        {
            if (AuthStateTask is null)
            {
                Logger.LogWarning("No se ha recibido el campo {FieldName}", nameof(AuthStateTask));
                return;
            }

            var authState = await AuthStateTask;
            var createUserCommand = new CreateUserCommand
            {
                Name = authState.User.Identity?.Name ?? "",
                Relogin = true
            };

            await Sender.SendAsync(createUserCommand, CancellationToken.None);
        }
    }

}
